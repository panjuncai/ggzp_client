npm init //初始化当前应用包, 生成 package.json
npm install //根据 package.json 下载所有依赖包
npm install packageName --save //下载某个运行时依赖包
npm install packageName --save-dev //下载某个开发编译期依赖包
npm install packageName -g //全局下载某个依赖包
npm install package@version //下载指定版本的某个依赖包
npm info packageName //查看某个包有远程仓库中的相关信息
npm rm packageName --save //移除已下载的运行依赖包
npm rm packageName –save-dev //移除已下载的开发依赖包
npm list //查看安装的所有的包
npm help //查看命令的详细帮助
npm install -g cnpm --registry=https://registry.npm.taobao.org //安装淘宝镜像* npm config set registry="https://registry.npm.taobao.org" //将淘宝镜像设置为npm 的默认仓库* npm run xxx //执行 package.json 的 scripts 中配置的命令
npm root -g //查看全局下载目录

git config --global user.name "username" //配置用户名* git config --global user.password "xx@gmail.com" //配置邮箱* git init //初始化生成一个本地仓库
git clone url //将远程仓库克隆下载到本地
git add * //添加到暂存区
git commit –m “message” //提交到本地仓库
git remote add origin url //关联到远程仓库
git push origin master //push 到远程
git pull origin master //从远程 pull 更新


# Install Mongodb
brew tap mongodb/brew

// Install the latest version -- too bad
// Use 6.0 version
//brew install mongodb/brew/mongodb-community
brew install mongodb-community@6.0
mongod --version
brew services start mongodb/brew/mongodb-community@6.0
brew services restart mongodb/brew/mongodb-community@6.0
brew services stop mongodb/brew/mongodb-community@6.0
brew services list


// Uninstall
brew uninstall mongodb/brew/mongodb-community@6.0

# Redux

## 判断是不是要用Redux全局管理状态的标准
应用程序的其他部分是否关心这些数据？
是否需要能够基于这些原始数据创建进一步的派生数据？
否使用相同的数据来驱动多个组件？
将这种状态恢复到给定的时间点（即时间旅行调试）对你是否有价值？
要缓存数据（即，如果数据已经存在，则使用它的状态而不是重新请求它）？
否希望在热重载视图组件（交换时可能会丢失其内部状态）时保持此数据一致？
